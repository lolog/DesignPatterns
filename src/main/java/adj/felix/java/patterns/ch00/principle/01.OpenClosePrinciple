>> 开闭原则(Open Close Principle)

01. 概念
	开闭原则：软件实体对扩展开放,对修改关闭。
	即,软件实体在需要拓展的时候,不能去修改原有的代码。
	其中,软件实体包括：01) 项目按照规则划分的模块,02) 抽象和类,03) 方法

02. 为什么使用开闭原则
	01) 面向对象编程,开发时都会强调开闭原则。
	02) 开闭原则是最基础的设计原则,其它的五个设计原则都是开闭原则的具体形态。根据java语言的称谓,开闭原则是抽象类,而其它的五个原则是具体的实现类。
	03) 开闭原则可以提高复用性 
		在面向对象的设计中,所有逻辑都是从原子逻辑组合而来,而不是在一个类中独立实现一个业务逻辑。
		那为什么要复用呢？减少代码的重复,避免相同的逻辑分散在多个角落,减少维护人员的工作量。
		那怎么才能提高复用率呢？缩小逻辑粒度,直到一个逻辑不可以分为止。
	04) 开闭原则可以提高维护性 
		一款软件量产后,维护人员的工作不仅仅对数据进行维护,还可能要对程序进行扩展,维护人员最乐意的事是扩展一个类,而不是修改一个类。
		让维护人员读懂原有代码,再进行修改,是一件非常痛苦的事情,不要让他在原有的代码海洋中游荡后再修改,那是对维护人员的折磨和摧残。
	05) 面向对象开发的要求 
		万物皆对象,我们要把所有的事物抽象成对象,然后针对对象进行操作,但是万物皆发展变化,有变化就要有策略去应对,怎么快速应对呢？
		这就需要在设计之初考虑到所有可能变化的因素,然后留下接口,等待"可能"转变为"现实"。

03. 如何使用开闭原则
	01) 抽象约束 
		抽象是对一组事物的通用描述,没有具体的实现,也就表示它可以有非常多的可能性,可以跟随需求的变化而变化。
		因此,通过接口或抽象类可以约束一组可能变化的行为,并且能够实现对扩展开放,其包含三层含义：
		1> 通过接口或抽象类约束扩散,对扩展进行边界限定,不允许出现在接口或抽象类中不存在的public方法。
		2> 参数类型,引用对象尽量使用接口或抽象类,而不是实现类,这主要是实现里氏替换原则的一个要求
		3> 抽象层尽量保持稳定,一旦确定就不要修改
	02) 元数据(metadata)控件模块行为 
		编程是一个很苦很累的活,那怎么才能减轻压力呢？答案是：尽量使用元数据来控制程序的行为,减少重复开发。
		什么是元数据？用来描述环境和数据的数据,通俗的说就是配置参数,参数可以从文件中获得,也可以从数据库中获得。
	03) 制定项目章程 
		在一个团队中,建立项目章程是非常重要的,因为章程是所有人员都必须遵守的约定,对项目来说,约定优于配置。这比通过接口或抽象类进行约束效率更高,而扩展性一点也没有减少。
	04) 封装变化 
		对变化封装包含两层含义： 
		1> 将相同的变化封装到一个接口或抽象类中 
		2> 将不同的变化封装到不同的接口或抽象类中,不应该有两个不同的变化出现在同一个接口或抽象类中。 
		封装变化,也就是受保护的变化,找出预计有变化或不稳定的点,我们为这些变化点创建稳定的接口。