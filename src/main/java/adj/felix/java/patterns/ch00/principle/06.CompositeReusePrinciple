>> 合成复用原则(Composite Reuse Principle)

01.定义
	又称：合成/聚合复用原则(CARP)
	定义：要尽量使用组合,尽量不要使用继承。
		
02.实现复用的方式
	01) 组合
		将对象引入到新对象中,使之成为新对象的一部分,因此新对象可以调用已有对象的功能,优缺点：
		01> 组合对象调用目标对象唯一方法是通过对象的接口。
		02> 复用是黑箱调用目标对象,目标对象隐藏了实现细节。
		03> 复用支持包装。
		04> 复用所需的依赖较少。
		05> 组合对象可以将焦点集中到一个任务上。
		06> 复用可以在运行时间动态进行,组合对象可以动态的引用或调用对象类型相同的对象。
		07> 组合复用的缺点: 组合复用构建的系统会有较多的对象需要管理。
	02) 继承
		组合几乎可以用到任何环境中去,但是继承只能用到一些环境中。
		继承复用通过扩展对象的实现来得到新的功能,基类提供共同的属性和方法,而子类通过增加新属性和方法来扩展基类的实现。
		01> 优点： 
			a.实现比较容易,因为基类的大部分功能都可以通过继承自动的进入子类。 
			b.修改或扩展继承而来的实现较为容易。
		02> 缺点：
			a. 继承复用破坏了包装,因为继承基类的实现细节暴露给子类。由于基类的内部细节常常对子类是透明的,因此这种复用是透明的复用,又称"白箱"复用。
			b. 如果基类的实现发生改变,那么子类的实现也不得不发生改变。
			c. 从基类继承而来的实现是静态的,不可能在运行时间内发生改变,因此没有足够的灵活性。
