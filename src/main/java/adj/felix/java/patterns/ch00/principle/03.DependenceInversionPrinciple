>> 依赖倒转原则(Dependence Inversion Principle)

01.定义
	简称:DIP
	定义:高层模块不应该依赖低层模块,都应该依赖抽象;抽象不应该依赖细节;细节应该依赖抽象。换言之,要针对接口编程,而非针对实现编程。
		其中,抽象指接口和抽象类
	附注：采用接口声明依赖的方式,称为接口注入
	
	开闭原则是目标,里氏代换是基础,依赖倒转是手段。
	
02.原则
	01) 高层模块不应该依赖于底层模块,都应该依赖抽象或接口。
	02) 抽象不应该依赖于细节,细节应该依赖于抽象或接口。

03.使用
	本质:通过抽象使各个类或模块的实现彼此独立,不互相影响,实现模块间的松耦合。项目中使用这个原则要遵循下面的规则：
	01) 每个类尽量都有接口或者抽象类,或者抽象类和接口两者都具备
	02) 变量类型尽可能使用接口或者抽象类
	03) 任何类都不应该从具体类派生
	04) 尽量不要重写基类的方法 
		如果基类是一个抽象类,而这个方法已经实现了,子类尽量不要重写。类间依赖的是抽象,重写了抽象的实现方法,对依赖的稳定性会有一定的影响。
	06) 结合里氏替换原则使用 
		里氏替换原则:父类出现的地方子类就能出现。结合本章我们得出了一个通俗的规则：
		接口:负责定义public属性和方法,并且声明与其他对象的依赖关系。
		抽象类:负责公共构造部分的实现,实现类准确的实现业务逻辑,同时在适当的时候对父类进行细化。