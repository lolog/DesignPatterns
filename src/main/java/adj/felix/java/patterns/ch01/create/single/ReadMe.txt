01. 实现单例的方式
	1) 外部方式
	         单例实例为全局对象时, "Try-Use"方式, 如果null, 创建实例赋值给该全局对象; 如果不为null, 直接返回。
	2) 内部方式
	         控制生成实例的数量, 即类自己控制只提供一个实例。

02. 单例模式的特点
	1) 只有一个实例。
	2) 内部创建自身的实例对象。
	3) 公开实例接口。

03. 单例模式的功能
	保证类在运行期间只会创建一个类实例, 另外单例模式还提供了全局唯一访问这个实例的访问点, 即getInstance方法。

04. 单例模式的范围
	01) ClassLoader及子ClassLoader范围
	            因为ClassLoader在装载饿汉式实例的单例类时, 会相应创建一个类的实例。
	02) 不适合于集群环境

05. 单例模式的命名
	单例模式的方法命名为getInstance, 方法可以有创建类时所需要的参数。
	
06. 优点
	1) 由于只有一个实例, 因此减少了内存的消耗, 特别是一个对象频繁的创建和销毁。
	2) 减少了系统性能开销, 如：对象需要读取配置、其他对象依赖时
	3) 单例可以避免对资源的多重占用。
	4) 单例模式可以在系统设置全局的访问点, 优化共享的访问。

07. 缺点：
	1) 单例模式没有接口, 拓展很困难。
	2) 单例模式对测试是不利的。并发环境, 单例模式没有完成, 是不能进行测试的。
	3) 单例模式和单一职责原则有冲突。

08. 使用场景
	1) 要求生成唯一序列号的环境。
	2) 在整个项目中, 需要有一个共享访问点和共享数据。
	3) 创建一个对象需要消耗过多的资源, 如数据库、IO等。
	4) 需要定义大量的静态常量和静态方法。

09. 分类
	1) 懒汉式单例(Lazy Singleton Pattern)
	2) 饿汉式单例 (Eager Singleton Pattern)
	3) 登记式单例(Reg Singleton Pattern)
	4) 静态内部类单例 (Static Inner Class Singleton Pattern)
	5) 枚举式单例(Enum Singleton Pattern)
	6) 双重校验锁单例(Double Verification Lock Singleton Pattern)