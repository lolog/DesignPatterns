01. 原型模式
    指用原型实例指定创建对象的种类, 并且通过拷贝这些原型来创建新的实例。即, 原型模式是通过复制现在已经存在的对象来创建一个新的对象。

02. 角色
    1) 抽象原型类(Prototype)
       声明拷贝方法的接口,是具体原型类的公共父类, 可以是抽象类, 也可以是接口, 甚至可以是具体的实现类。
    2) 具体原型类(ConcretePrototype)
    3) Client(客户类)
        让原型对象拷贝自身, 从而创建一个新的对象。
        在客户类中, 通过直接序列化或工厂方法创建一个具体原型对象, 调用原型对象的拷贝方法, 即可拷贝多个相同对象。

03. 分类
    1) 浅拷贝
        指被拷贝对象的所有变量都含有与原对象相同的值, 而所有对其他对象的引用仍然指向原来的对象。即, 浅拷贝不拷贝它引用的对象.
    2) 深拷贝
        指被拷贝对象的所有变量都含有与原对象相同的值, 除引用对象外。
        引用对象变量指向被拷贝过的新对象, 而不再是原有的那些引用对象。

04. 优点
    1) 性能
       使用原型模型创建一个对象比直接new一个对象效率更高, 因为它直接操作内存中的二进制流, 特别是复制大对象时, 性能的差别非常明显。 
    2) 操作简单
       隐藏了制造新实例的复杂性, 使得创建对象就像我们在编辑文档时的复制粘贴一样简单。

05. 缺点
    1) 原型模式对象不能是final类。
    2) Object类的clone方法只会拷贝对象中的基本数据类型, 对于数组, 引用对象等只能另行拷贝。

06. 实用场景
    1) 资源优化场景
       类初始化需要消耗非常多的资源, 这个资源包含数据、硬件资源等。
    2) 性能和安全要求场景
	   通过new创建的对象需要非常繁琐的数据准备或访问权限。
    3) 一个对象多个修改者场景
	   对象需要提供给其他对象访问, 而且各个调用者可能都需要修改其值。