观察者模式
亦标记(Token)模式。

01. 定义
    在不破坏封装性的前提下, 捕获一个对象的内部状态, 并在该对象之外保存这个状态。之后可将该对象恢复到原先保存的状态。
    因此, 备忘录模式是专门用来存放对象的历史状态的, 对于undo/redo功能提供了很好的支持。
02. 结构组成
	(01) Originator(原发器)
		 创建备忘录对象, 记录当前时刻备忘录对象的内部状态。在需要时使用备忘录恢复内部状态。
	(02) Caretaker(备忘录管理者)
	     负责保存好备忘录。不能对备忘录的内容进行操作或检查。
	(03) Memento(备忘录)
	     存储Originator的内部状态, 防止Originator以外的其他对象访问备忘录。
	     Memento提供了2个接口：窄接口和宽接口。Caretaker只能看到窄接口,只能把备忘录传递给其他对象。 Originator则能够看到宽接口, 允许访问返回到之前状态所需的数据。
03. 分类
    白箱备忘录模式        - White Box Memento Pattern
    黑箱备忘录模式        - Black Box Memento Pattern
    多重检点备忘录模式    - Mutiple Check Memento Pattern
    自述历史备忘录模式    - SayHistory Memento Pattern
04. 优点
    (01) 更好的封装性
         备忘录模式通过使用备忘录对象, 来封装原发器对象的内部状态, 虽然这个对象是保存在原发器对象的外部, 但是由于备忘录对象的窄接口并不提供任何方法, 这样有效的保证了对原发器对象内部状态的封装, 不把原发器对象的内部实现细节暴露给外部。
    (02) 简化了原发器
    	 备忘录模式中, 备忘录对象被保存到原发器对象之外, 让客户来管理请求的状态, 从而让原发器对象得到简化。
    (03) 窄接口和宽接口
05. 缺点
    (01) 可能会导致高开销
         备忘录模式基本的功能, 就是对备忘录对象的存储和恢复, 其的基本实现方式就是缓存备忘录对象。如果需要缓存的数据量很大, 或者是特别频繁的创建备忘录对象, 开销会很大。
06. 实用场景
    (01) undo和redo操作
    (02) 事务回滚操作